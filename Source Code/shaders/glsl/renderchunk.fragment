// __multiversion__
// This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.

#include "fragmentVersionCentroid.h"

#if __VERSION__ >= 300
	#ifndef BYPASS_PIXEL_SHADER
		#if defined(TEXEL_AA) && defined(TEXEL_AA_FEATURE)
			_centroid in highp vec2 uv0;
			_centroid in highp vec2 uv1;
		#else
			_centroid in vec2 uv0;
			_centroid in vec2 uv1;
		#endif
	#endif
#else
	#ifndef BYPASS_PIXEL_SHADER
		varying vec2 uv0;
		varying vec2 uv1;
	#endif
#endif

varying vec4 color;

#include "uniformShaderConstants.h"
#include "util.h"

#include "Lib/fragmentShaderVariablesContributor.glsl"
#include "Lib/fragmentShaderFunctionsContributor.glsl"

LAYOUT_BINDING(0) uniform sampler2D TEXTURE_0;
LAYOUT_BINDING(1) uniform sampler2D TEXTURE_1;
LAYOUT_BINDING(2) uniform sampler2D TEXTURE_2;

uniform vec4 FOG_COLOR;
uniform vec2 FOG_CONTROL;

uniform float TIME;

uniform float RENDER_DISTANCE;

varying highp vec3 ChunkPosition;
varying highp vec3 WorldPosition;
varying highp vec3 CubemapPosition;

varying highp vec3 ScreenSpacePosition;

void main()
{
#ifdef BYPASS_PIXEL_SHADER
	gl_FragColor = vec4(0, 0, 0, 0);
	return;
#else 

#if USE_TEXEL_AA
	vec4 diffuse = texture2D_AA(TEXTURE_0, uv0);
#else
	vec4 diffuse = texture2D(TEXTURE_0, uv0);
#endif

#if USE_ALPHA_TEST
	#ifdef ALPHA_TO_COVERAGE
	#define ALPHA_THRESHOLD 0.005
	#else
	#define ALPHA_THRESHOLD 0.5
	#endif
	if(diffuse.a < ALPHA_THRESHOLD)
		discard;
#endif
	
vec4 inColor = color;

#if defined(BLEND)
	diffuse.a *= inColor.a;
#endif

#ifndef SEASONS
	#if !USE_ALPHA_TEST && !defined(BLEND)
		diffuse.a = inColor.a;
	#endif
    
    diffuse.rgb *= ColorTint(inColor);

#else
	vec2 uv = inColor.xy;
	diffuse.rgb *= mix(vec3(1.0,1.0,1.0), texture2D( TEXTURE_2, uv).rgb*2.0, inColor.b);
	diffuse.rgb *= inColor.aaa;
	diffuse.a = 1.0;
#endif

float SkyExposure = min(1.64 - smoothstep(0.00, 1.00, pow(1.00 - uv1.y, 0.20)), 1.00);

highp vec3 WorldNormal = normalize(cross(dFdx(ChunkPosition), dFdy(ChunkPosition)));
highp vec3 ViewDirection = normalize(WorldPosition);

vec3 SunPosition = vec3(1000.0, 1000.0, 0.00);

highp float LdotU =  max(dot(SunDirection, UpDirection), 0.00);
highp float NdotL = max(dot(WorldNormal, SunDirection), 0.00) * length(SunPosition / 1000.0);
highp float NdotU = max(dot(WorldNormal, UpDirection), 0.00);

diffuse.rgb *= mix(1.00, 1.075, NdotU);
diffuse.rgb = ToLinear(diffuse.rgb);
//diffuse.rgb = mix(vec3(Luma(diffuse.rgb)), diffuse.rgb, LdotU);

vec3 SkyAbsorption = Absorption(LdotU, LdotU * LdotU);

float Lightmap = max(min(pow(uv1.y + 0.128, 16.0), 1.00) - 0.128, 0.00) /* pow(LdotU, 2.00)*/;
float AmbientOcclusion = mix(pow(length(inColor.rgb) / length(ColorTint(inColor)), 2.00) * 2.50, 1.00, NdotL);

Lighting.Envlight = (SkylightColor * SkyAbsorption * 0.0667 + SunlightColor * 0.20);
Lighting.Sunlight = SunlightColor * (NdotL * 0.55 * Lightmap + Lighting.Envlight) * 1.167 * AmbientOcclusion * pow(uv1.y, 2.00) /* vec3(0.81, 0.20, 0.05) * 0.8672 */;

vec3 illumination =  vec3(1.00) * Lighting.Sunlight;

diffuse.rgb *= illumination;

#ifdef BLEND
	if(color.b-color.r>color.g-color.r){
	    highp float time = TIME;
		vec2 coord_offset = vec2(2.6875,4.0625);
		
		highp vec3 CubemapViewDirection = normalize(-CubemapPosition);
		highp vec3 WaterNormal = normalize((texture2D(TEXTURE_0, fract((ChunkPosition.xz - time) / 16.0) / 4.00 + coord_offset / 16.0) * 0.50
                                                    + texture2D(TEXTURE_0, fract((ChunkPosition.xz + time) / 8.00) / 4.00 + coord_offset / 16.0) * 0.50).xzy * 2.00 - 1.00);
		highp vec3 ReflectedPosition = -reflect(CubemapViewDirection, WaterNormal);
		
        highp float Skylight = max(dot(ReflectedPosition, UpDirection), 0.00);
		highp float Sunlight = max(dot(ReflectedPosition, SunDirection), 0.00);
		highp float Specular = pow(max(dot(reflect(-normalize(SunDirection + CubemapViewDirection), WaterNormal), CubemapViewDirection), 0.00), 100.0);
		
		float NdotV = max(dot(WaterNormal, CubemapViewDirection), 0.00);
		
		diffuse.rgb = DrawSky(0.00, Skylight, LdotU) + Specular;
		diffuse.a = 0.675 - 0.325 * NdotV + Specular * 0.77625;
	}
#endif

float SeaDepth = (1.00 - pow(uv1.y * 0.60 + 0.40, 0.25)) * max(-WorldPosition.y / 256.0, 0.00) * length(normalize(WorldPosition));
//diffuse.rgb = mix(diffuse.rgb, SkylightColor, SeaDepth);

float FogFactor = pow(1.00 - exp(-clamp(length(-WorldPosition) / (RENDER_DISTANCE * 6.40), 0.00, 1.00)), 2.00) / 4.00;
vec3 FogColor = pow(SkylightColor, vec3(1.00) - FogFactor) * Absorption(1.00 - FogFactor, LdotU * LdotU);
diffuse.rgb = mix(diffuse.rgb, FogColor, FogFactor);

diffuse.rgb = ColorProcessing(diffuse.rgb);

	gl_FragColor = diffuse;

#endif // BYPASS_PIXEL_SHADER
}