// __multiversion__
// This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.

#include "vertexVersionCentroid.h"
#if __VERSION__ >= 300
	#ifndef BYPASS_PIXEL_SHADER
		_centroid out vec2 uv0;
		_centroid out vec2 uv1;
	#endif
#else
	#ifndef BYPASS_PIXEL_SHADER
		varying vec2 uv0;
		varying vec2 uv1;
	#endif
#endif

#ifndef BYPASS_PIXEL_SHADER
	varying vec4 color;
#endif

#include "uniformWorldConstants.h"
#include "uniformPerFrameConstants.h"
#include "uniformShaderConstants.h"
#include "uniformRenderChunkConstants.h"

attribute POS4 POSITION;
attribute vec4 COLOR;
attribute vec2 TEXCOORD_0;
attribute vec2 TEXCOORD_1;

//uniform highp float TIME;

#include "Lib/vertexShaderVariablesContributor.glsl"
#include "Lib/vertexShaderFunctionsContributor.glsl"

varying highp vec3 ChunkPosition;
varying highp vec3 WorldPosition;

varying highp vec3 CubemapPosition;
varying highp vec3 ScreenSpacePosition;

void main()
{
	highp vec4 worldPos = vec4((POSITION.xyz * CHUNK_ORIGIN_AND_SCALE.w) + CHUNK_ORIGIN_AND_SCALE.xyz, 1.00);
	
	#ifdef AS_ENTITY_RENDERER
		highp vec4 vertexPos = WORLDVIEWPROJ * POSITION;
	#else
		highp vec4 vertexPos = WORLDVIEWPROJ * worldPos;
	#endif
	
	gl_Position = vertexPos;
	
	WorldPosition = worldPos.xyz;
	ChunkPosition = POSITION.xyz;
	
	CubemapPosition = worldPos.xyz - vec3(0.00, 0.180 * length(worldPos.xz) / RENDER_DISTANCE, 0.00);
	ScreenSpacePosition = normalize(vec3(WORLDVIEW * worldPos));

	#ifndef BYPASS_PIXEL_SHADER
	    uv0 = TEXCOORD_0;
	    uv1 = TEXCOORD_1;
    
		color = COLOR;
	#endif

	#ifdef BLEND
		#ifndef FANCY
			color = vec4(COLOR.rgb, 0.50);
		#endif
	#endif
}
